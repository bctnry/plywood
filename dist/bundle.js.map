{"version":3,"file":"bundle.js","sources":["../src/Token.ts","../src/Lexer.ts","../src/main.ts"],"sourcesContent":["export enum TokenType {\n    PLAIN, NUMBER, STRING, IDENTIFIER, KEYWORD, COMMENT, EDITOR_PLACEHOLDER, SYMBOL, WHITESPACE\n}\n\nexport enum TokenClass {\n    // NUMBER\n    INTEGER, FLOAT, COMPLEX,\n    // STRING\n    STRPART, ESCSEQ,\n\n    // SYMBOL\n    LPAR, RPAR, LSQB, RSQB, COLON, COMMA, SEMI, PLUS, MINUS, STAR, SLASH,\n    VBAR, AMPER, LESS, GREATER, EQUAL, DOT, PERCENT, LBRACE, RBRACE, EQEQUAL,\n    NOTEQUAL, LESSEQUAL, GREATEREQUAL, TILDE, CIRCUMFLEX, LEFTSHIFT,\n    RIGHTSHIFT, DOUBLESTAR, PLUSEQUAL, MINEQUAL, STAREQUAL, SLASHEQUAL,\n    PERCENTEQUAL, AMPEREQUAL, VBAREQUAL, CIRCUMFLEXEQUAL, LEFTSHIFTEQUAL,\n    RIGHTSHIFTEQUAL, DOUBLESTAREQUAL, DOUBLESLASH, DOUBLESLASHEQUAL,\n    AT, ATEQUAL, RARROW, ELLIPSIS,\n\n    // WHITESPACE\n    NEWLINE, INDENT, DEDENT, NL,\n\n    // GENERAL\n    NORMAL, ERROR\n}\n\nexport interface Token {\n    type: TokenType;\n    class: TokenClass;\n    start: number;\n    end: number;\n}\n\nexport\nconst _prettyPrint = (token: Token) => {\n    return JSON.stringify({type: TokenType[token.type], class: TokenClass[token.class], start: token.start, end: token.end });\n};\n","import { Token, TokenType, TokenClass } from \"./Token\";\n\n// some predicates...\nconst _isNonZeroDigit = (x: any) => x >= '1' && x <= '9';\nconst _isDigit = (x: any) => x >= '0' && x <= '9';\nconst _isHexDigit = (x: any) => (x >= 'a' && x <= 'z') || (x >= 'A' && x <= 'Z') || _isDigit(x);\nconst _isBinDigit = (x: any) => x === '0' || x === '1';\nconst _isOctDigit = (x: any) => x >= '0' && x <= '7';\nconst _isLowerAlphabet = (x: any) => x >= 'a' && x <= 'z';\nconst _isUpperAlphabet = (x: any) => x >= 'A' && x <= 'Z';\nconst _isAlphabet = (x: any) => _isLowerAlphabet(x) || _isUpperAlphabet(x);\nconst _isWhitespace = (x: any) => ' \\n\\t\\r'.includes(x);\nconst _isNewline = (x: any) => '\\n\\r'.includes(x);\n\nconst RESERVED_WORDS = [\n    'False', 'await', 'else', 'import', 'pass', 'None', 'break',\n    'except', 'in', 'raise', 'True', 'class', 'finally', 'is',\n    'return', 'and', 'continue', 'for', 'lambda', 'try', 'as',\n    'def', 'from', 'nonlocal', 'while', 'assert', 'del', 'global',\n    'not', 'with', 'async', 'elif', 'if', 'or', 'yield'\n];\n\n// see docs/automata_numberLIteral for how this works.\nexport enum _LSTATENUM {\n    START, FR_1, FR_1_1, FR_E_1, FR_E_P_1, FR_E_E, FR_E_E_1,\n    FR_D_2, J_1, DIGIT_1, DIGIT_2, FLOAT_1, ZERO_1, ZERO_2, ZERO_3, ZERO_E,\n    BIN, BIN_1, BIN_2, OCT, OCT_1, OCT_2, HEX, HEX_1, HEX_2,\n    STOP\n}\nexport\nconst _expectNumber = (i: number, input: string) => {\n    let st: any = _LSTATENUM.START;\n    let lastst: any = null;\n    let start = i;\n    while (input[i] && st != _LSTATENUM.STOP) {\n        switch (st) {\n            case _LSTATENUM.START: { switch (input[i]) {\n                case '.': { i += 1; st = _LSTATENUM.FR_1; break; }\n                case '0': { i += 1; st = _LSTATENUM.ZERO_1; break; }\n                default: {\n                    if (_isNonZeroDigit(input[i])) { i += 1; st = _LSTATENUM.DIGIT_1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.FR_1: { switch (input[i]) {\n                default: {\n                    if (input[i] >= '0' && input[i] <= '9') { i += 1; st = _LSTATENUM.FR_1_1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break;}\n            } break; }\n            case _LSTATENUM.FR_1_1: { switch (input[i]) {\n                case 'e': case 'E': { i += 1; st = _LSTATENUM.FR_E_1; break; }\n                case '_': { i += 1; st = _LSTATENUM.FR_D_2; break; }\n                case 'j': case 'J': { i += 1; st = _LSTATENUM.J_1; break; }\n                default: {\n                    if (_isDigit(input[i])) { i += 1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.FR_E_1: { switch (input[i]) {\n                case '-': case '+': { i += 1; st = _LSTATENUM.FR_E_P_1; break; }\n                default: {\n                    if (_isDigit(input[i])) { i += 1; st = _LSTATENUM.FR_E_E; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.FR_E_P_1: { switch (input[i]) {\n                default: {\n                    if (_isDigit(input[i])) { i += 1; st = _LSTATENUM.FR_E_E; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.FR_E_E: { switch (input[i]) {\n                case 'j': case 'J': { i += 1; st = _LSTATENUM.J_1; break; }\n                case '_': { i += 1; st = _LSTATENUM.FR_E_E_1; break; }\n                default: {\n                    if (_isDigit(input[i])) { i += 1; st = _LSTATENUM.FR_E_E; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.FR_E_E_1: { switch (input[i]) {\n                default: {\n                    if (_isDigit(input[i])) { i += 1; st = _LSTATENUM.FR_E_E; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.J_1: { switch (input[i]) {\n                default: { lastst = st; st = _LSTATENUM.STOP; break; }\n            } break; }\n            case _LSTATENUM.DIGIT_1: { switch (input[i]) {\n                case 'j': case 'J': { i += 1; st = _LSTATENUM.J_1; break; }\n                case '.': { i += 1; st = _LSTATENUM.FLOAT_1; break; }\n                case '_': { i += 1; st = _LSTATENUM.DIGIT_2; break; }\n                default: {\n                    if (_isDigit(input[i])) { i += 1; st = _LSTATENUM.DIGIT_1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.DIGIT_2: { switch (input[i]) {\n                default: {\n                    if (_isDigit(input[i])) { i += 1; st = _LSTATENUM.DIGIT_1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.ZERO_1: { switch (input[i]) {\n                case '.': { i += 1; st = _LSTATENUM.FLOAT_1; break; }\n                case '0': { i += 1; st = _LSTATENUM.ZERO_E; break; }\n                case 'b': case 'B': { i += 1; st = _LSTATENUM.BIN; break; }\n                case 'o': case 'O': { i += 1; st = _LSTATENUM.OCT; break; }\n                case 'x': case 'X': { i += 1; st = _LSTATENUM.HEX; break; }\n                case 'j': case 'J': { i += 1; st = _LSTATENUM.J_1; break; }\n                default: { lastst = st; st = _LSTATENUM.STOP; break; }\n            } break; }\n            case _LSTATENUM.ZERO_E: { switch (input[i]) {\n                case '.': { i += 1; st = _LSTATENUM.FLOAT_1; break; }\n                case '0': { i += 1; break; }\n                case '_': { i += 1; st = _LSTATENUM.ZERO_2; break; }\n                default: { lastst = st; st = _LSTATENUM.STOP; break; }\n            } break; }\n            case _LSTATENUM.FLOAT_1: { switch (input[i]) {\n                case 'j': case 'J': { i += 1; st = _LSTATENUM.J_1; break; }\n                default: {\n                    if (_isDigit(input[i])) { i += 1; st = _LSTATENUM.FR_1_1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.ZERO_2: { switch (input[i]) {\n                case '0': { i += 1; st = _LSTATENUM.ZERO_3; break; }\n                default: { lastst = st; st = _LSTATENUM.STOP; break; }\n            } break; }\n            case _LSTATENUM.ZERO_3: { switch (input[i]) {\n                case '0': { i += 1; break; }\n                default: { lastst = st; st = _LSTATENUM.STOP; break; }\n            } break; }\n            case _LSTATENUM.BIN: { switch (input[i]) {\n                case '_': { i += 1; st = _LSTATENUM.BIN_2; break; }\n                default: {\n                    if (_isBinDigit(input[i])) { i += 1; st = _LSTATENUM.BIN_1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.BIN_1: { switch (input[i]) {\n                case '_': { i += 1; st = _LSTATENUM.BIN_2; break; }\n                default: {\n                    if (_isBinDigit(input[i])) { i += 1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.BIN_2: { switch (input[i]) {\n                default: {\n                    if (_isBinDigit(input[i])) { i += 1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.OCT: { switch (input[i]) {\n                case '_': { i += 1; st = _LSTATENUM.OCT_2; break; }\n                default: {\n                    if (_isOctDigit(input[i])) { i += 1; st = _LSTATENUM.OCT_1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.OCT_1: { switch (input[i]) {\n                case '_': { i += 1; st = _LSTATENUM.OCT_2; break; }\n                default: {\n                    if (_isOctDigit(input[i])) { i += 1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.OCT_2: { switch (input[i]) {\n                default: {\n                    if (_isOctDigit(input[i])) { i += 1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.HEX: { switch (input[i]) {\n                case '_': { i += 1; st = _LSTATENUM.HEX_2; break; }\n                default: {\n                    if (_isHexDigit(input[i])) { i += 1; st = _LSTATENUM.HEX_1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.HEX_1: { switch (input[i]) {\n                case '_': { i += 1; st = _LSTATENUM.HEX_2; break; }\n                default: {\n                    if (_isHexDigit(input[i])) { i += 1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n            case _LSTATENUM.HEX_2: { switch (input[i]) {\n                default: {\n                    if (_isHexDigit(input[i])) { i += 1; }\n                    else { lastst = st; st = _LSTATENUM.STOP; } break; }\n            } break; }\n        }\n    }\n    if (st !== _LSTATENUM.STOP) {\n        lastst = st;\n    }\n    switch (lastst) {\n        case _LSTATENUM.J_1:\n            { return ({ type: TokenType.NUMBER, class: TokenClass.COMPLEX, start, end: i }); }\n        case _LSTATENUM.FR_1_1:\n        case _LSTATENUM.FLOAT_1:\n        case _LSTATENUM.FR_E_E:\n            { return ({ type: TokenType.NUMBER, class: TokenClass.FLOAT, start, end: i }); }\n        case _LSTATENUM.DIGIT_1:\n        case _LSTATENUM.ZERO_1:\n        case _LSTATENUM.ZERO_E:\n        case _LSTATENUM.ZERO_3:\n        case _LSTATENUM.BIN_1:\n        case _LSTATENUM.OCT_1:\n        case _LSTATENUM.HEX_1:\n            { return ({ type: TokenType.NUMBER, class: TokenClass.INTEGER, start, end: i }); }\n        default: {\n            return null;\n        }\n    }\n}\n\ntype _LSTRFLAG = {\n    byte: boolean,\n    raw: boolean,\n    unicode: boolean,\n    fstr: boolean,\n    multiline: boolean,\n    escaping: string|null\n};\n\nexport\nconst _expectEscapeSequence\n= (flag: any) => (i: number, input: string) => {\n    // few things to remember:\n    // when the source string the caller is processing denotes a bytestring,\n    // some char sequence are not considered to be escape sequence (i.e.\n    // \\u \\U and \\N as of Python 3.7), this function will returns `true`\n    // just in case someone just do `if (_expectEscapeSequence(flag)(i, s))`\n    // instead of testing whether it's `null` explicitly. (when a \"real\"\n    // escape sequence is detected, this function will return an object.)\n    let res = ({ type: TokenType.STRING, class: TokenClass.ESCSEQ, start: i, end: i });\n\n    if (input[i] !== '\\\\') return null;\n    i += 1;\n\n    if (flag.raw) {\n        if (input[i] === flag.escaping) {\n            i += 1; res.end = i; return res;\n        } else {\n            return true;\n        }\n    } else {\n        // single escape:\n        switch (input[i]) {\n            case '\\n': case '\\\\': case '\\'': case '\"': case 'a': case 'b':\n            case 'f': case 'n': case 'r': case 't': case 'v': {\n                i += 1; res.end = i; return res;\n            }\n            // this case is somewhat special, because there are 3 different ways\n            // to represent a linebreak: \\n in *nix, \\r\\n in windows, and \\r in \n            // classic macos (the macos before mac os x). so here's the thing...\n            case '\\r': {\n                i += 1;\n                if (input[i + 1] === '\\n') i += 1;\n                res.end = i; return res;\n            }\n            // it might be a better idea to do the octal case in the default clause\n            case 'x': {\n                i += 1;\n                if (!_isHexDigit(input[i]) || !_isHexDigit(input[i + 1])) return null;\n                i += 2; res.end = i; return res;\n            }\n            case 'u': {\n                // remember: in bytestrings and raw strings the sequence \\u is not\n                // considered to be an escape sequence, \n                if (flag.byte) return true;\n\n                i += 1;\n                for (let _i = 0; _i < 4; _i++) {\n                    if (!_isHexDigit(input[i + _i])) {\n                        return null;\n                    }\n                }\n                i += 4; res.end = i; return res;            \n            }\n            case 'U': {\n                // here, is another problem: CPython will throw a SyntaxError even\n                // if the user *did* have 8 hex digit following the 'U' character,\n                // if those 8 hex digit does not form a valid unicode codepoint.\n                // but i'm not gonna do it here simply because it's a different\n                // kind of syntax error.\n                if (flag.byte) return true;\n\n                i += 1;\n                for (let _i = 0; _i < 8; _i++) {\n                    if (!_isHexDigit(input[i + _i])) {\n                        return null;\n                    }\n                }\n                i += 8; res.end = i; return res;        \n            }\n            case 'N': {\n                // \\N escape has the same problem in the \\U escape: if the name\n                // following \\N does not resemble an alias in the alias table,\n                // it's a syntax error. i'm not gonna handle this here, too.\n                // the said alias table:\n                //   http://www.unicode.org/Public/11.0.0/ucd/NameAliases.txt\n                if (flag.byte) return true;\n\n                i += 1;\n                if (input[i] !== '{') return null; i += 1;\n                while (_isAlphabet(input[i]) || input[i] === ' ') i++;\n                if (input[i] !== '}') return null; i += 1;\n                res.end = i; return res;\n            }\n            default: {\n                if (_isDigit(input[i])) {\n                    let _i = 0;\n                    while (_isDigit(input[i + _i]) && _i < 3) _i++;\n                    i += _i;\n                    res.end = i; return res;\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n}\n\nexport\nconst _expectString\n: (i: number, input: string) => Token[]|null\n= (i: number, input: string) => {\n    let res = [];\n    let done = false;\n    let start = i;\n\n    let flag: _LSTRFLAG = {\n        byte: false,\n        raw: false,\n        unicode: false,\n        fstr: false,\n        multiline: false,\n        escaping: null as string|null\n    }\n    // this is for the prefix...\n    let flagMapping\n    : {prefix:string, flag:('byte'|'raw'|'fstr')[], len:number}[]\n    = [\n        { prefix: 'br', flag: ['byte', 'raw'], len: 2 },\n        { prefix: 'bR', flag: ['byte', 'raw'], len: 2 },\n        { prefix: 'Br', flag: ['byte', 'raw'], len: 2 },\n        { prefix: 'BR', flag: ['byte', 'raw'], len: 2 },\n        { prefix: 'rb', flag: ['byte', 'raw'], len: 2 },\n        { prefix: 'rB', flag: ['byte', 'raw'], len: 2 },\n        { prefix: 'Rb', flag: ['byte', 'raw'], len: 2 },\n        { prefix: 'RB', flag: ['byte', 'raw'], len: 2 },\n        { prefix: 'fr', flag: ['fstr', 'raw'], len: 2 },\n        { prefix: 'fR', flag: ['fstr', 'raw'], len: 2 },\n        { prefix: 'Fr', flag: ['fstr', 'raw'], len: 2 },\n        { prefix: 'FR', flag: ['fstr', 'raw'], len: 2 },\n        { prefix: 'rf', flag: ['fstr', 'raw'], len: 2 },\n        { prefix: 'rF', flag: ['fstr', 'raw'], len: 2 },\n        { prefix: 'Rf', flag: ['fstr', 'raw'], len: 2 },\n        { prefix: 'RF', flag: ['fstr', 'raw'], len: 2 },\n        { prefix: 'r', flag: ['raw'], len: 1 },\n        { prefix: 'R', flag: ['raw'], len: 1 },\n        { prefix: 'f', flag: ['fstr'], len: 1 },\n        { prefix: 'F', flag: ['fstr'], len: 1 },\n        { prefix: 'b', flag: ['byte'], len: 1 },\n        { prefix: 'B', flag: ['byte'], len: 1 },\n    ];\n    for (let _i in flagMapping) {\n        if (input.startsWith(flagMapping[_i].prefix, i)) {\n            for (let _j in flagMapping[_i].flag) {\n                flag[flagMapping[_i].flag[_j]] = true;\n            }\n            i += flagMapping[_i].len;\n            break;\n        }\n    }\n    // and this is for the single/multi line...\n    if (input[i] == '\"') {\n        flag.escaping = '\"';\n    } else if (input[i] == '\\'') {\n        flag.escaping = '\\'';\n    } else {\n        return null;\n    }\n    // if it's not single or double quote the call will have already returned.\n    i++;\n    if (input[i] === flag.escaping && input[i+1] === flag.escaping) {\n        flag.multiline = true; i += 2;\n    }\n    // now here's the fun part...\n    // if you use builtin javascript string, then it's wrong because python3\n    // sources are meant to be encoded in utf8 when there's no \"encoding\n    // header\", while in javascript strings are utf16...\n    let FORCE_NORMAL = false;\n    while (input[i]) {\n        if (input[i] === '\\\\' && !FORCE_NORMAL) {\n            let lastEnd: number = res && res.length? (res[res.length - 1] as any).end : start;\n            res.push({ type: TokenType.STRING, class: TokenClass.STRPART, start: lastEnd, end: i });\n            let newI = _expectEscapeSequence(flag)(i, input);\n            if (!newI) return ([{ type: TokenType.STRING, class: TokenClass.ERROR, start, end: input.indexOf('\\n', i) }]);\n            if (newI === true) {\n                res.pop();\n                FORCE_NORMAL = true;\n            } else {\n                res.push(newI);\n                i = newI.end;\n                start = newI.end;\n            }\n        } else if (input[i] === flag.escaping) {\n            // now we have to check if it's a multiline string, because in a\n            // multiline string the enclosing character can occur freely as\n            // long as there isn't three of them occuring at the same time,\n            // e.g. `'''a''a''a'''` evals to \"a''a''a\", and `'''a'''a''a'''`\n            // contains a syntax error.\n            if (\n                flag.multiline &&\n                    (input[i+1] && input[i+2] && input[i+1] === flag.escaping && input[i+2] === flag.escaping)\n                ||\n                !flag.multiline\n            ) {\n                done = true;\n                i += flag.multiline? 3 : 1;\n                break;\n            } else {\n                i += 1;\n            }\n        } else if (_isNewline(input[i])) {\n            if (!flag.multiline) return ([{ type: TokenType.STRING, class: TokenClass.ERROR, start, end: input.indexOf('\\n', i) }]);\n            i += 1;\n            FORCE_NORMAL = false;\n        } else {\n            i += 1;\n            FORCE_NORMAL = false;\n        }\n    }\n    if (done) {\n        res.push({ type: TokenType.STRING, class: TokenClass.STRPART, start, end: i });\n        return res as any;\n    }\n    else { return null; }\n}\n\nexport\nconst _expectIdentifier = (i: number, input: string) => {\n    // this function currently does not support unicode character.\n    // assuming that an identifier can only be started with letters and\n    // underscore, and can only contain letters and numbers.\n    if (!(_isAlphabet(input[i]) || input[i] !== '_')) return null;\n    let start = i;\n    i += 1;\n    while (_isAlphabet(input[i]) || _isDigit(input[i]) || input[i] === '_') i++;\n    return ({ type: TokenType.IDENTIFIER, class: TokenClass.NORMAL, start, end: i });\n}\n\nexport\nconst _expectSymbol\n: (i: number, input: string) => Token|null\n= (i: number, input: string) => {\n    let start = i;\n    const symbolTable = [\n        { string: \"+=\", class: TokenClass.PLUSEQUAL },\n        { string: \"-=\", class: TokenClass.MINEQUAL },\n        { string: \"*=\", class: TokenClass.STAREQUAL },\n        { string: \"/=\", class: TokenClass.SLASHEQUAL },\n        { string: \"//=\", class: TokenClass.DOUBLESLASHEQUAL },\n        { string: \"%=\", class: TokenClass.PERCENTEQUAL },\n        { string: \"@=\", class: TokenClass.ATEQUAL },\n        { string: \"&=\", class: TokenClass.AMPEREQUAL },\n        { string: \"|=\", class: TokenClass.VBAREQUAL },\n        { string: \"^=\", class: TokenClass.CIRCUMFLEXEQUAL },\n        { string: \">>=\", class: TokenClass.RIGHTSHIFTEQUAL },\n        { string: \"<<=\", class: TokenClass.LEFTSHIFTEQUAL },\n        { string: \"**=\", class: TokenClass.DOUBLESTAREQUAL },\n        { string: '+=', class: TokenClass.PLUSEQUAL },\n        { string: \"(\", class: TokenClass.LPAR },\n        { string: \")\", class: TokenClass.RPAR },\n        { string: \"[\", class: TokenClass.LSQB },\n        { string: \"]\", class: TokenClass.RSQB },\n        { string: \"{\", class: TokenClass.LBRACE },\n        { string: \"}\", class: TokenClass.RBRACE },\n        { string: \",\", class: TokenClass.COMMA },\n        { string: \":\", class: TokenClass.COLON },\n        { string: \".\", class: TokenClass.DOT },\n        { string: \";\", class: TokenClass.SEMI },\n        { string: \"@\", class: TokenClass.AT },\n        { string: \"=\", class: TokenClass.EQUAL },\n        { string: \"->\", class: TokenClass.RARROW },\n        { string: \"+\", class: TokenClass.PLUS },\n        { string: \"-\", class: TokenClass.MINUS },\n        { string: \"*\", class: TokenClass.STAR },\n        { string: \"**\", class: TokenClass.DOUBLESTAR },\n        { string: \"/\", class: TokenClass.SLASH },\n        { string: \"//\", class: TokenClass.DOUBLESLASH },\n        { string: \"%\", class: TokenClass.PERCENT },\n        { string: \"@\", class: TokenClass.AMPER },\n        { string: \"<<\", class: TokenClass.LEFTSHIFT },\n        { string: \">>\", class: TokenClass.RIGHTSHIFT },\n        { string: \"&\", class: TokenClass.AMPEREQUAL },\n        { string: \"|\", class: TokenClass.VBAR },\n        { string: \"^\", class: TokenClass.CIRCUMFLEX },\n        { string: \"~\", class: TokenClass.TILDE },\n        { string: \"<\", class: TokenClass.LESS },\n        { string: \">\", class: TokenClass.GREATER },\n        { string: \"<=\", class: TokenClass.LESSEQUAL },\n        { string: \">=\", class: TokenClass.GREATEREQUAL },\n        { string: \"==\", class: TokenClass.EQEQUAL },\n        { string: \"!=\", class: TokenClass.NOTEQUAL },\n    ];\n    for (let _i in symbolTable) {\n        if (input.startsWith(symbolTable[_i].string, i)) {\n            return ({ type: TokenType.SYMBOL, class: symbolTable[_i].class, start, end: i +  symbolTable[_i].string.length}) as any;\n        }\n    }\n    return null;\n}\n\nexport\nconst _expectWhitespace = (i: number, input: string) => {\n    // note 2019.6.8: this version of lexer is just for syntax highlighting\n    // so no special treatment for indentation.\n    let start = i;\n    let _i = 0;\n    while (_isWhitespace(input[i + _i])) _i += 1;\n    if (_i === 0) return null;\n    return ({ type: TokenType.WHITESPACE, class: TokenClass.NORMAL, start, end: i + _i });\n}\n\nexport\nconst _expectComment = (i: number, input: string) => {\n    // this function expects that input[i] points to the hash character.\n    let start = i;\n    i += 1;\n    while (input[i] && !_isNewline(input[i])) i += 1;\n    return ({ type: TokenType.COMMENT, class: TokenClass.NORMAL, start, end: i });\n}\n\nexport\nconst _lex = (input: string) => {\n    let res: Token[] = [];\n    let i = 0;\n    while (input[i]) {\n        if (_isWhitespace(input[i])) {\n            let matchres = _expectWhitespace(i, input);\n            if (matchres) {\n                res.push(matchres); i = matchres.end; continue;\n            }\n        }\n        if (_isDigit(input[i]) || input[i] === '.') {\n            let matchres = _expectNumber(i, input);\n            if (matchres) {\n                res.push(matchres); i = matchres.end; continue;\n            }\n        }\n        if ('rbuf\\'\\\"'.includes(input[i])) {\n            let matchres = _expectString(i, input);\n            if (matchres && matchres.length) {\n                res = res.concat(matchres); i = matchres[matchres.length - 1].end; continue;\n            }\n        }\n        if (input[i] === '_' || _isAlphabet(input[i])) {\n            let matchres = _expectIdentifier(i, input);\n            if (matchres) {\n                let prevI = res.length? res[res.length - 1].end : 0;\n                let pattern = input.substring(prevI, matchres.end);\n                res.push(\n                    RESERVED_WORDS.includes(pattern)?\n                        ({ type: TokenType.KEYWORD, class: TokenClass.NORMAL, start: matchres.start, end: matchres.end })\n                        : matchres\n                ); i = matchres.end; continue;\n            }\n        }\n        if (input[i] === '#') {\n            let matchres = _expectComment(i, input);\n            if (matchres) {\n                res.push(matchres);\n                i = matchres.end; continue;\n            }\n        }\n        let matchres = _expectSymbol(i, input);\n        if (matchres) {\n            res.push(matchres); i = matchres.end; continue;\n        } else {\n            let lineEnd = input.indexOf('\\n', i);\n            if (lineEnd === -1) lineEnd = input.length;\n            res.push({ type: TokenType.PLAIN, class: TokenClass.ERROR, start: i, end: lineEnd });\n            i = lineEnd; continue;\n        }\n    }\n    return res;\n}\n","import * as Lexer from \"./Lexer\";\nimport * as Token from \"./Token\";\n\nclass Test {\n    public static Lexer = Lexer;\n    public static Token = Token;\n}\n\nexport default Test;\n"],"names":[],"mappings":"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"}